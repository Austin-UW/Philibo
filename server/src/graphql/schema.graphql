type Query {
  user(id: String!): User
  purchasedStocks: [SimpleStock!]!
}

type StockActivity {
  date: String!
  purchase: Int! # positive or negative
}

type SimpleStock {
  purchasePrice: Int!
  purchaseDate: String!
  symbol: String!
  name: String!
  amount: Int!
  activity: [StockActivity!]!
}

type Boo {
  output: String!
}

type User {
  id: String!
  profileImg: String
  username: String!
  email: String!
}

type Auth {
  user: User!
}

type Void {
  id: String!
}

type Mutation {
  # should these even be here?
  register(username: String!, password: String!, email: String!): Auth!
  login(email: String!, password: String!): Auth!
  loginWithCookie: Auth!
  logout: Void!

  buySellStock(amount: Int!, symbol: String!): String! # returns symbol of stock
}
